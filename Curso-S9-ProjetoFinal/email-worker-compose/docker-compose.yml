version: "3"
volumes:
  # Named volume
  dados:
# Redes segregadas
networks:
  # Rede que será exclusiva do BD
  banco:
  # Rede que será exclusiva do NGINX
  web:
  # Rede que será exclusiva
  fila:
services:
  db:
    image: postgres:9.6
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      # Volumes dos dados
      - dados:/var/lib/postgresql/data
      # Scripts
      - ./scripts:/scripts
      # Este padrão de inicilização está na documentação oficial do postgres
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    #Dizendo que este serviço pertence apenas a rede 'banco' e não acesso direto as outras redes (precisa consigurar).
    networks:
      - banco
  frontend:
    image: nginx:1.13
    volumes:
      # Site
      - ./web:/usr/share/nginx/html/
      # Configuração do proxy reverso
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 85:80
    #Dizendo que este serviço pertence apenas a rede 'web' e não acesso direto as outras redes (precisa consigurar).
    networks:
      - web
    # Serve  dizer a(s) dependência(s) que precisam subir antes do serviço, se fizer um 'docker-compose up NOMEDOSERVICO, ele vai subir as dependências também'
    depends_on:
      - app
  app:
    image: python:3.6
    volumes:
      # Aplicação
      - ./app:/app
    working_dir: /app
    command: bash ./app.sh
    #Essa configuração de porta era necessário quanda não se tinha um proxy reverso confidurado no bo arquivo 'default.conf'
    #ports:
    #  - 8090:8080

    #Dizendo que este serviço pertence as redes 'banco' e 'web' e não acesso direto as outras redes (precisa consigurar).
    networks:
      - banco
      - web
      - fila
    depends_on:
      - db
      - queue
    # Variável de ambiente colocada errada de propósito para ser sobrescrita pelo 
    environment:
      - DB_NAME=kakakaak_sender
  queue:
    image: redis:3.2
    networks:
      - fila
  worker:
    # Ele vai procurar uma pasta chamada worker, dentro dessa pasta vai procurar um Dockerfile e usar essa imagem customizada para gerar o serviço.
    build: worker
    volumes:
      # Worker
      - ./worker:/worker
    working_dir: /worker
    command: worker.py
    networks:
      - fila
    depends_on:
      - queue
