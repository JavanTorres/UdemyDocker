# 53. Banco de dados

Criar o banco de dados, criar uma pasta chamda 'email-worker-compose' e dentro dela um docker-compose.yml e após isso na raiz da pasta rodar 
'docker-compose up -d' para subir em background e depois rodar 'docker-compose ps' para ver o processo rodando.

Rodar para entrar no processo e listar os bancos de dados:

'docker-compose exec db psql -U postgres -c '\l''

O '-U' (maiúsculo) é para dizer o usuário e o '-c' o comando, nol ugar de '\l' poseria ser um select por exemplo.

Resultado:

   Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges   
-----------+----------+----------+------------+------------+-----------------------
 postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
(3 rows)



Rodar 'docker-compose down' para parar o(s) serviço(s). Ele vai remover o db_1 e a rede criada pra esse compose.


# 54. Volumes

Vamos criar a pasta scripts e nela os arquivos 'check.sql' e 'init.sql'.
Agora vamos mapear os volumes no compose.

Rodar 'docker-compose ps' para verificar se existe um serviço rodando.
Se nada estiver rodando 'docker-compose up -d'.
Caso já esteja rodando rodar 'docker-compose down' e rodar novamente 'd'ocker-compose up -d'.  É preciso estudar a politica de restart e ver se funcion a para pegar novas configurações no compose.

Rodar 'docker-compose exec db psql -U postgres -f /scripts/check.sql' para ver se o script de inicialização funcionoue o bd "email_sender" foi criado com sucesso.
Tive problemas ao criar o BD, pois quando subi o serviço o init do BD não estava configurado de forma correta, foi preciso rodar 'ocker-compose down'-v', no caso "-v":

-v, --volumes           Remove named volumes declared in the `volumes`
                            section of the Compose file and anonymous volumes
                            attached to containers.

Rodar 'docker-compose exec db psql -U postgres -f /scripts/check.sql' vai retornar algo como:

List of databases
     Name     |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges   
--------------+----------+----------+------------+------------+-----------------------
 email_sender | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 postgres     | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 template0    | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
              |          |          |            |            | postgres=CTc/postgres
 template1    | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
              |          |          |            |            | postgres=CTc/postgres
(4 rows)

You are now connected to database "email_sender" as user "postgres".
                                    Table "public.emails"
  Column  |            Type             |                      Modifiers                      
----------+-----------------------------+-----------------------------------------------------
 id       | integer                     | not null default nextval('emails_id_seq'::regclass)
 data     | timestamp without time zone | not null default now()
 assunto  | character varying(100)      | not null
 mensagem | character varying(250)      | not null


# 55. Front-End.
   Voltar ao compose.
   Criar uma pasta web, dentro dela criar o index.html.

   Rodar 'docker-compose ps' para ver se o compose do worker está rodando se estiver parar com 'docker-compose down' e subir novamente.

   Chamar http://localhost:8080/

   Podemos ver  os logs com 'docker-compose logs -f -t'

# 56. Filas (app).
   Criar a pasta app e os arquivos app.sh e sender.py.
   Voltar ao compose.

   docker-compose down
   docker-compose up

   https://github.com/taigaio/taiga-back/issues/1122

Ver que a chamda ao Backend funciona.

# 56. Proxy reverso.

Criar uma pasta nginx e dentro dela um arquivo 'default.config'

Tirar a configuração de abertura de porta do service 'app' que está no compose.

Alterar a action do arquivo HTML para http://localhost:MINHAPORTA/api

docker-compose down

docker-compose down

Chamar: http://localhost:MINHAPORTA/

# 58. Redes.

Voltar para o compose e segregar as redes criando os networks:

  # Rede que será exclusiva do BD
  banco:
  # Rede que será exclusiva do NGINX
  web:
  # Rede que será exclusiva

  Dizer a que rede depende cada serviço networks(em cada serviço).

  E apontandos as dependências 'depends_on'.

   No arquivio 'app.sh' adicionar dependência para acesso so postgres e alterar o arquivo python.

   docker-compose down

   docker-compose up -d

   docker-compose logs -f -t


   Chamar: http://localhost:MINHAPORTA/ e fazer a gravação e depois:

  'docker-compose exec db psql -U postgres -d email_sender -c 'select * from emails''

  Para viasualizar se foi gravado no BD.

  # 59. Workers