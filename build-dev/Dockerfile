FROM python:3.6
LABEL maintainer 'Aluno Cod3r Javan'
# Adciona um usuário www
RUN useradd www && \
# Criar pasta app
    mkdir /app && \
# Criar pasta log
    mkdir /log && \
# Dizer que o dono da pasta log é o usuário www
    chown www /log

#Definir quem será o usuário que vai estar logado no momento que forem executados os processos dentro do container.
USER www
#Volumes are the preferred mechanism for persisting data generated by and used by Docker containers. While bind mounts are dependent on the directory structure and OS of the host machine, volumes are completely managed by Docker. ... You can manage volumes using Docker CLI commands or the Docker API.
VOLUME /log
# Definindo o diretório de trabalho.
WORKDIR /app
# Expondo uma porta, no momento que o container for iniciado a porta pode ser alterada.
EXPOSE 8000

## The ENTRYPOINT specifies a command that will always be executed when the container starts.

# Definir ponto de entrada, ou seja o processo que será iniciado.
ENTRYPOINT ["/usr/local/bin/python"]

## The CMD specifies arguments that will be fed to the ENTRYPOINT.
CMD ["run.py"]


#    As instruções CMD e ENTRYPOINT definem qual comando é executado ao executar um contêiner. Existem poucas regras que descrevem sua cooperação.
#
#        1.O Dockerfile deve especificar pelo menos um CMD ou ENTRYPOINT comandos.
#        2.ENTRYPOINT deve ser definido ao usar o contêiner como um executável.
#        3.CMD deve ser usado como uma maneira de definir argumentos padrão para um ENTRYPOINT comando ou para executar um comando ad-hoc em um contêiner.
#        4.CMD será substituído ao executar o contêiner com argumentos alternativos.

#As tabelas abaixo mostram qual comando é executado para diferentes ENTRYPOINT / CMD combinações :

#- No ENTRYPOINT

#╔════════════════════════════╦═════════════════════════════╗
#║ No CMD                     ║ error, not allowed          ║
#╟────────────────────────────╫─────────────────────────────╢
#║ CMD [“exec_cmd”, “p1_cmd”] ║ exec_cmd p1_cmd             ║
#╟────────────────────────────╫─────────────────────────────╢
#║ CMD [“p1_cmd”, “p2_cmd”]   ║ p1_cmd p2_cmd               ║
#╟────────────────────────────╫─────────────────────────────╢
#║ CMD exec_cmd p1_cmd        ║ /bin/sh -c exec_cmd p1_cmd  ║
#╚════════════════════════════╩═════════════════════════════╝

#- ENTRYPOINT exec_entry p1_entry

#╔════════════════════════════╦══════════════════════════════════╗
#║ No CMD                     ║ /bin/sh -c exec_entry p1_entry   ║
#╟────────────────────────────╫──────────────────────────────────╢
#║ CMD [“exec_cmd”, “p1_cmd”] ║ /bin/sh -c exec_entry p1_entry   ║
#╟────────────────────────────╫──────────────────────────────────╢
#║ CMD [“p1_cmd”, “p2_cmd”]   ║ /bin/sh -c exec_entry p1_entry   ║
#╟────────────────────────────╫──────────────────────────────────╢
#║ CMD exec_cmd p1_cmd        ║ /bin/sh -c exec_entry p1_entry   ║
#╚════════════════════════════╩══════════════════════════════════╝

#- ENTRYPOINT [“exec_entry”, “p1_entry”]

#╔════════════════════════════╦═════════════════════════════════════════════════╗
#║ No CMD                     ║ exec_entry p1_entry                             ║
#╟────────────────────────────╫─────────────────────────────────────────────────╢
#║ CMD [“exec_cmd”, “p1_cmd”] ║ exec_entry p1_entry exec_cmd p1_cmd             ║
#╟────────────────────────────╫─────────────────────────────────────────────────╢
#║ CMD [“p1_cmd”, “p2_cmd”]   ║ exec_entry p1_entry p1_cmd p2_cmd               ║
#╟────────────────────────────╫─────────────────────────────────────────────────╢
#║ CMD exec_cmd p1_cmd        ║ exec_entry p1_entry /bin/sh -c exec_cmd p1_cmd  ║
#╚════════════════════════════╩═════════════════════════════════════════════════╝
